// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dinogrpcdata.proto

/*
Package dinogrpc is a generated protocol buffer package.

It is generated from these files:
	dinogrpcdata.proto

It has these top-level messages:
	Animal
	Request
*/
package dinogrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Animal struct {
	Id         int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	AnimalType string `protobuf:"bytes,2,opt,name=animal_type,json=animalType" json:"animal_type,omitempty"`
	Nickname   string `protobuf:"bytes,3,opt,name=nickname" json:"nickname,omitempty"`
	Zone       int32  `protobuf:"varint,4,opt,name=zone" json:"zone,omitempty"`
	Age        int32  `protobuf:"varint,5,opt,name=age" json:"age,omitempty"`
}

func (m *Animal) Reset()                    { *m = Animal{} }
func (m *Animal) String() string            { return proto.CompactTextString(m) }
func (*Animal) ProtoMessage()               {}
func (*Animal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Animal) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Animal) GetAnimalType() string {
	if m != nil {
		return m.AnimalType
	}
	return ""
}

func (m *Animal) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Animal) GetZone() int32 {
	if m != nil {
		return m.Zone
	}
	return 0
}

func (m *Animal) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type Request struct {
	Nickname string `protobuf:"bytes,1,opt,name=nickname" json:"nickname,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func init() {
	proto.RegisterType((*Animal)(nil), "dinogrpc.animal")
	proto.RegisterType((*Request)(nil), "dinogrpc.request")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DinoService service

type DinoServiceClient interface {
	GetAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Animal, error)
	GetAllAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (DinoService_GetAllAnimalClient, error)
}

type dinoServiceClient struct {
	cc *grpc.ClientConn
}

func NewDinoServiceClient(cc *grpc.ClientConn) DinoServiceClient {
	return &dinoServiceClient{cc}
}

func (c *dinoServiceClient) GetAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Animal, error) {
	out := new(Animal)
	err := grpc.Invoke(ctx, "/dinogrpc.DinoService/GetAnimal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dinoServiceClient) GetAllAnimal(ctx context.Context, in *Request, opts ...grpc.CallOption) (DinoService_GetAllAnimalClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DinoService_serviceDesc.Streams[0], c.cc, "/dinogrpc.DinoService/GetAllAnimal", opts...)
	if err != nil {
		return nil, err
	}
	x := &dinoServiceGetAllAnimalClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DinoService_GetAllAnimalClient interface {
	Recv() (*Animal, error)
	grpc.ClientStream
}

type dinoServiceGetAllAnimalClient struct {
	grpc.ClientStream
}

func (x *dinoServiceGetAllAnimalClient) Recv() (*Animal, error) {
	m := new(Animal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for DinoService service

type DinoServiceServer interface {
	GetAnimal(context.Context, *Request) (*Animal, error)
	GetAllAnimal(*Request, DinoService_GetAllAnimalServer) error
}

func RegisterDinoServiceServer(s *grpc.Server, srv DinoServiceServer) {
	s.RegisterService(&_DinoService_serviceDesc, srv)
}

func _DinoService_GetAnimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DinoServiceServer).GetAnimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dinogrpc.DinoService/GetAnimal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DinoServiceServer).GetAnimal(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DinoService_GetAllAnimal_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DinoServiceServer).GetAllAnimal(m, &dinoServiceGetAllAnimalServer{stream})
}

type DinoService_GetAllAnimalServer interface {
	Send(*Animal) error
	grpc.ServerStream
}

type dinoServiceGetAllAnimalServer struct {
	grpc.ServerStream
}

func (x *dinoServiceGetAllAnimalServer) Send(m *Animal) error {
	return x.ServerStream.SendMsg(m)
}

var _DinoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dinogrpc.DinoService",
	HandlerType: (*DinoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAnimal",
			Handler:    _DinoService_GetAnimal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAnimal",
			Handler:       _DinoService_GetAllAnimal_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dinogrpcdata.proto",
}

func init() { proto.RegisterFile("dinogrpcdata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x49, 0xf7, 0xc3, 0xdd, 0x59, 0x91, 0x3a, 0xa7, 0xd0, 0x8b, 0xa5, 0x20, 0xf4, 0x54,
	0x8a, 0xe2, 0x0f, 0x10, 0x04, 0xef, 0xd5, 0xbb, 0xc4, 0x66, 0x28, 0xc1, 0x36, 0x89, 0x31, 0x16,
	0xaa, 0x7f, 0x5e, 0x9a, 0xb6, 0x4a, 0x8f, 0xde, 0x26, 0xcf, 0xf0, 0x3e, 0xe4, 0x1d, 0x40, 0xa9,
	0xb4, 0x69, 0x9c, 0xad, 0xa5, 0xf0, 0xa2, 0xb0, 0xce, 0x78, 0x83, 0x87, 0x85, 0x65, 0xdf, 0xb0,
	0x17, 0x5a, 0x75, 0xa2, 0xc5, 0x0b, 0x88, 0x94, 0xe4, 0x2c, 0x65, 0xf9, 0xae, 0x8a, 0x94, 0xc4,
	0x2b, 0x38, 0x4d, 0x9b, 0x17, 0x3f, 0x58, 0xe2, 0x51, 0xca, 0xf2, 0x63, 0x05, 0x13, 0x7a, 0x1e,
	0x2c, 0x61, 0x02, 0x07, 0xad, 0xea, 0x37, 0x2d, 0x3a, 0xe2, 0x9b, 0xb0, 0xfd, 0x7d, 0x23, 0xc2,
	0xf6, 0xcb, 0x68, 0xe2, 0xdb, 0xa0, 0x0b, 0x33, 0xc6, 0xb0, 0x11, 0x0d, 0xf1, 0x5d, 0x40, 0xe3,
	0x98, 0x5d, 0xc3, 0x99, 0xa3, 0xf7, 0x4f, 0xfa, 0xf0, 0x2b, 0x19, 0x5b, 0xcb, 0x6e, 0x7a, 0x38,
	0x3d, 0x28, 0x6d, 0x9e, 0xc8, 0xf5, 0xaa, 0x26, 0x2c, 0xe1, 0xf8, 0x48, 0xfe, 0x7e, 0xfa, 0xf5,
	0x65, 0xb1, 0x54, 0x29, 0x66, 0x55, 0x12, 0xff, 0xa1, 0xb9, 0xda, 0x1d, 0x9c, 0x8f, 0x89, 0xb6,
	0xfd, 0x47, 0xa8, 0x64, 0xaf, 0xfb, 0x70, 0xac, 0xdb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0xa9, 0xd3, 0x5e, 0x42, 0x01, 0x00, 0x00,
}
